diff --git a/node_modules/@react-native-community/cli-platform-apple/build/commands/runCommand/createRun.d.ts.map b/node_modules/@react-native-community/cli-platform-apple/build/commands/runCommand/createRun.d.ts.map
index 4312974..7b0a28a 100644
--- a/node_modules/@react-native-community/cli-platform-apple/build/commands/runCommand/createRun.d.ts.map
+++ b/node_modules/@react-native-community/cli-platform-apple/build/commands/runCommand/createRun.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"createRun.d.ts","sourceRoot":"","sources":["../../../src/commands/runCommand/createRun.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAKH,OAAO,EAAC,MAAM,EAAmB,MAAM,mCAAmC,CAAC;AAY3E,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAC;AASxD,OAAO,EAAC,cAAc,EAAC,MAAM,aAAa,CAAC;AAO3C,MAAM,WAAW,MAAO,SAAQ,UAAU;IACxC,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,MAAM,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC;IACvB,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,UAAU,CAAC,EAAE,MAAM,CAAC;IACpB,WAAW,CAAC,EAAE,OAAO,CAAC;IACtB,QAAQ,CAAC,EAAE,OAAO,CAAC;IACnB,IAAI,EAAE,MAAM,CAAC;IACb,QAAQ,CAAC,EAAE,MAAM,CAAC;CACnB;AAYD,QAAA,MAAM,SAAS,qBACI,cAAc,SACrB,MAAM,MAAM,CAAC,OAAO,MAAM,QAAQ,MAAM,kBAuUjD,CAAC;AAEJ,eAAe,SAAS,CAAC"}
\ No newline at end of file
+{"version":3,"file":"createRun.d.ts","sourceRoot":"","sources":["../../../src/commands/runCommand/createRun.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAKH,OAAO,EAAC,MAAM,EAAmB,MAAM,mCAAmC,CAAC;AAY3E,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAC;AASxD,OAAO,EAAC,cAAc,EAAC,MAAM,aAAa,CAAC;AAO3C,MAAM,WAAW,MAAO,SAAQ,UAAU;IACxC,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,MAAM,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC;IACvB,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,UAAU,CAAC,EAAE,MAAM,CAAC;IACpB,WAAW,CAAC,EAAE,OAAO,CAAC;IACtB,QAAQ,CAAC,EAAE,OAAO,CAAC;IACnB,IAAI,EAAE,MAAM,CAAC;IACb,QAAQ,CAAC,EAAE,MAAM,CAAC;CACnB;AAYD,QAAA,MAAM,SAAS,qBACI,cAAc,SACrB,MAAM,MAAM,CAAC,OAAO,MAAM,QAAQ,MAAM,kBAiVjD,CAAC;AAEJ,eAAe,SAAS,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-apple/build/commands/runCommand/createRun.js b/node_modules/@react-native-community/cli-platform-apple/build/commands/runCommand/createRun.js
index a217a62..8509a60 100644
--- a/node_modules/@react-native-community/cli-platform-apple/build/commands/runCommand/createRun.js
+++ b/node_modules/@react-native-community/cli-platform-apple/build/commands/runCommand/createRun.js
@@ -198,13 +198,28 @@ const createRun = ({
     return _cliTools().logger.error('The `device` and `udid` options are mutually exclusive.');
   }
   if (args.udid) {
-    const device = devices.find(d => d.udid === args.udid);
-    if (!device) {
-      return _cliTools().logger.error(`Could not find a device with udid: "${_chalk().default.bold(args.udid)}". ${(0, _matchingDevice.printFoundDevices)(devices)}`);
-    }
-    if (device.type === 'simulator') {
+    var _device;
+    let device = devices.find(d => d.udid === args.udid);
+    if (((_device = device) === null || _device === void 0 ? void 0 : _device.type) === 'simulator') {
       return (0, _runOnSimulator.runOnSimulator)(xcodeProject, platformName, mode, scheme, args, fallbackSimulator);
     } else {
+      if (!device) {
+        // On arm64 machines, the catalyst UDID returned by 'xcrun xctrace list devices' is not correct
+        // xcodebuild will return an error indicating the UDID is unknown and offering a different one
+        // you may obtain it by running xcodebuild with the UDID you think works then parse out the other one from the returned error:
+        // CATALYST_DESTINATION=$(xcodebuild -workspace ios/rnfbdemo.xcworkspace -configuration Debug -scheme rnfbdemo -destination id=7153382A-C92B-5798-BEA3-D82D195F25F8 2>&1|grep macOS|grep Catalyst|head -1 |cut -d':' -f5 |cut -d' ' -f1)
+        //
+        // How to handle the incorrect catalyst UDID?
+        // Assume if a UDID is specified, the user knows what they are doing.
+        // Use the given UDID and force the type, so "catalyst" will launch the app correctly
+        device = {
+          name: 'unknown',
+          udid: args.udid,
+          type: 'catalyst'
+        };
+        _cliTools().logger.warn(`Could not find a device with udid: "${_chalk().default.bold(args.udid)}".`);
+        _cliTools().logger.warn('Running with provided udid anyway, and type "catalyst". \'xcodebuild\' command may return error.');
+      }
       return (0, _runOnDevice.runOnDevice)(device, platformName, mode, scheme, xcodeProject, args);
     }
   } else if (args.device) {
@@ -232,4 +247,4 @@ const createRun = ({
 var _default = createRun;
 exports.default = _default;
 
-//# sourceMappingURL=/Users/thymikee/Developer/rnccli/packages/cli-platform-apple/build/commands/runCommand/createRun.js.map
\ No newline at end of file
+//# sourceMappingURL=/Users/mike/work/react-random/cli/packages/cli-platform-apple/build/commands/runCommand/createRun.js.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/cli-platform-apple/build/commands/runCommand/createRun.js.map b/node_modules/@react-native-community/cli-platform-apple/build/commands/runCommand/createRun.js.map
index 3fc68b4..30b8afe 100644
--- a/node_modules/@react-native-community/cli-platform-apple/build/commands/runCommand/createRun.js.map
+++ b/node_modules/@react-native-community/cli-platform-apple/build/commands/runCommand/createRun.js.map
@@ -1 +1 @@
-{"version":3,"names":["getPackageJson","root","require","path","join","CLIError","createRun","platformName","_","ctx","args","link","setPlatform","platformConfig","project","sdkNames","readableName","platformReadableName","getPlatformInfo","undefined","supportedPlatforms","packager","port","installedPods","automaticPodsInstallation","forcePods","onlyPods","isAppRunningNewArchitecture","sourceDir","getArchitecture","resolvePods","dependencies","reactNativePath","forceInstall","newArchEnabled","newPort","startPackager","findDevServerPort","startServerInNewWindow","terminal","reactNativeVersion","setVersion","xcodeProject","getXcodeProjectAndDir","process","chdir","binaryPath","isAbsolute","fs","existsSync","mode","scheme","getConfiguration","buildOutput","buildProject","openApp","target","devices","listDevices","length","logger","error","packageJson","preferredDevice","cacheManager","get","name","preferredDeviceIndex","findIndex","udid","device","splice","unshift","fallbackSimulator","getFallbackSimulator","interactive","warn","selectedDevice","promptForDeviceSelection","set","type","runOnSimulator","runOnDevice","simulator","bootedSimulators","filter","state","bootedDevices","booted","info","map","find","d","chalk","bold","printFoundDevices","matchingDevice","deviceByUdid"],"sources":["../../../src/commands/runCommand/createRun.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport path from 'path';\nimport fs from 'fs';\nimport chalk from 'chalk';\nimport {Config, IOSProjectConfig} from '@react-native-community/cli-types';\nimport {\n  logger,\n  CLIError,\n  link,\n  startServerInNewWindow,\n  findDevServerPort,\n  cacheManager,\n} from '@react-native-community/cli-tools';\nimport getArchitecture from '../../tools/getArchitecture';\nimport listDevices from '../../tools/listDevices';\nimport {promptForDeviceSelection} from '../../tools/prompts';\nimport {BuildFlags} from '../buildCommand/buildOptions';\nimport {buildProject} from '../buildCommand/buildProject';\nimport {getConfiguration} from '../buildCommand/getConfiguration';\nimport {getXcodeProjectAndDir} from '../buildCommand/getXcodeProjectAndDir';\nimport {getFallbackSimulator} from './getFallbackSimulator';\nimport {getPlatformInfo} from './getPlatformInfo';\nimport {printFoundDevices, matchingDevice} from './matchingDevice';\nimport {runOnDevice} from './runOnDevice';\nimport {runOnSimulator} from './runOnSimulator';\nimport {BuilderCommand} from '../../types';\nimport {\n  supportedPlatforms,\n  resolvePods,\n} from '@react-native-community/cli-config-apple';\nimport openApp from './openApp';\n\nexport interface FlagsT extends BuildFlags {\n  simulator?: string;\n  device?: string | true;\n  udid?: string;\n  binaryPath?: string;\n  listDevices?: boolean;\n  packager?: boolean;\n  port: number;\n  terminal?: string;\n}\n\nfunction getPackageJson(root: string) {\n  try {\n    return require(path.join(root, 'package.json'));\n  } catch {\n    throw new CLIError(\n      'No package.json found. Please make sure the file exists in the current folder.',\n    );\n  }\n}\n\nconst createRun =\n  ({platformName}: BuilderCommand) =>\n  async (_: Array<string>, ctx: Config, args: FlagsT) => {\n    // React Native docs assume platform is always ios/android\n    link.setPlatform('ios');\n    const platformConfig = ctx.project[platformName] as IOSProjectConfig;\n    const {sdkNames, readableName: platformReadableName} =\n      getPlatformInfo(platformName);\n\n    if (\n      platformConfig === undefined ||\n      supportedPlatforms[platformName] === undefined\n    ) {\n      throw new CLIError(\n        `Unable to find ${platformReadableName} platform config`,\n      );\n    }\n\n    let {packager, port} = args;\n    let installedPods = false;\n    // check if pods need to be installed\n    if (\n      platformConfig.automaticPodsInstallation ||\n      args.forcePods ||\n      args.onlyPods\n    ) {\n      const isAppRunningNewArchitecture = platformConfig.sourceDir\n        ? await getArchitecture(platformConfig.sourceDir)\n        : undefined;\n\n      await resolvePods(\n        ctx.root,\n        platformConfig.sourceDir,\n        ctx.dependencies,\n        platformName,\n        ctx.reactNativePath,\n        {\n          forceInstall: args.forcePods || args.onlyPods,\n          newArchEnabled: isAppRunningNewArchitecture,\n        },\n      );\n\n      installedPods = true;\n    }\n\n    if (args.onlyPods) {\n      return;\n    }\n\n    if (packager) {\n      const {port: newPort, startPackager} = await findDevServerPort(\n        port,\n        ctx.root,\n      );\n\n      if (startPackager) {\n        await startServerInNewWindow(\n          newPort,\n          ctx.root,\n          ctx.reactNativePath,\n          args.terminal,\n        );\n      }\n    }\n\n    if (ctx.reactNativeVersion !== 'unknown') {\n      link.setVersion(ctx.reactNativeVersion);\n    }\n\n    let {xcodeProject, sourceDir} = getXcodeProjectAndDir(\n      platformConfig,\n      platformName,\n      installedPods,\n    );\n\n    process.chdir(sourceDir);\n\n    if (args.binaryPath) {\n      args.binaryPath = path.isAbsolute(args.binaryPath)\n        ? args.binaryPath\n        : path.join(ctx.root, args.binaryPath);\n\n      if (!fs.existsSync(args.binaryPath)) {\n        throw new CLIError(\n          'binary-path was specified, but the file was not found.',\n        );\n      }\n    }\n\n    const {mode, scheme} = await getConfiguration(\n      xcodeProject,\n      sourceDir,\n      args,\n      platformName,\n    );\n\n    if (platformName === 'macos') {\n      const buildOutput = await buildProject(\n        xcodeProject,\n        platformName,\n        undefined,\n        mode,\n        scheme,\n        args,\n      );\n\n      openApp({\n        buildOutput,\n        xcodeProject,\n        mode,\n        scheme,\n        target: args.target,\n        binaryPath: args.binaryPath,\n      });\n\n      return;\n    }\n\n    let devices = await listDevices(sdkNames);\n\n    if (devices.length === 0) {\n      return logger.error(\n        `${platformReadableName} devices or simulators not detected. Install simulators via Xcode or connect a physical ${platformReadableName} device`,\n      );\n    }\n\n    const packageJson = getPackageJson(ctx.root);\n\n    const preferredDevice = cacheManager.get(\n      packageJson.name,\n      'lastUsedIOSDeviceId',\n    );\n\n    if (preferredDevice) {\n      const preferredDeviceIndex = devices.findIndex(\n        ({udid}) => udid === preferredDevice,\n      );\n\n      if (preferredDeviceIndex > -1) {\n        const [device] = devices.splice(preferredDeviceIndex, 1);\n        devices.unshift(device);\n      }\n    }\n\n    const fallbackSimulator =\n      platformName === 'ios' || platformName === 'tvos'\n        ? getFallbackSimulator(args)\n        : devices[0];\n\n    if (args.listDevices || args.interactive) {\n      if (args.device || args.udid) {\n        logger.warn(\n          `Both ${\n            args.device ? 'device' : 'udid'\n          } and \"list-devices\" parameters were passed to \"run\" command. We will list available devices and let you choose from one.`,\n        );\n      }\n\n      const selectedDevice = await promptForDeviceSelection(devices);\n\n      if (!selectedDevice) {\n        throw new CLIError(\n          `Failed to select device, please try to run app without ${\n            args.listDevices ? 'list-devices' : 'interactive'\n          } command.`,\n        );\n      } else {\n        if (selectedDevice.udid !== preferredDevice) {\n          cacheManager.set(\n            packageJson.name,\n            'lastUsedIOSDeviceId',\n            selectedDevice.udid,\n          );\n        }\n      }\n\n      if (selectedDevice.type === 'simulator') {\n        return runOnSimulator(\n          xcodeProject,\n          platformName,\n          mode,\n          scheme,\n          args,\n          selectedDevice,\n        );\n      } else {\n        return runOnDevice(\n          selectedDevice,\n          platformName,\n          mode,\n          scheme,\n          xcodeProject,\n          args,\n        );\n      }\n    }\n\n    if (!args.device && !args.udid && !args.simulator) {\n      const bootedSimulators = devices.filter(\n        ({state, type}) => state === 'Booted' && type === 'simulator',\n      );\n      const bootedDevices = devices.filter(({type}) => type === 'device'); // Physical devices here are always booted\n      const booted = [...bootedSimulators, ...bootedDevices];\n\n      if (booted.length === 0) {\n        logger.info(\n          'No booted devices or simulators found. Launching first available simulator...',\n        );\n        return runOnSimulator(\n          xcodeProject,\n          platformName,\n          mode,\n          scheme,\n          args,\n          fallbackSimulator,\n        );\n      }\n\n      logger.info(`Found booted ${booted.map(({name}) => name).join(', ')}`);\n\n      for (const simulator of bootedSimulators) {\n        await runOnSimulator(\n          xcodeProject,\n          platformName,\n          mode,\n          scheme,\n          args,\n          simulator || fallbackSimulator,\n        );\n      }\n\n      for (const device of bootedDevices) {\n        await runOnDevice(\n          device,\n          platformName,\n          mode,\n          scheme,\n          xcodeProject,\n          args,\n        );\n      }\n\n      return;\n    }\n\n    if (args.device && args.udid) {\n      return logger.error(\n        'The `device` and `udid` options are mutually exclusive.',\n      );\n    }\n\n    if (args.udid) {\n      const device = devices.find((d) => d.udid === args.udid);\n      if (!device) {\n        return logger.error(\n          `Could not find a device with udid: \"${chalk.bold(\n            args.udid,\n          )}\". ${printFoundDevices(devices)}`,\n        );\n      }\n      if (device.type === 'simulator') {\n        return runOnSimulator(\n          xcodeProject,\n          platformName,\n          mode,\n          scheme,\n          args,\n          fallbackSimulator,\n        );\n      } else {\n        return runOnDevice(\n          device,\n          platformName,\n          mode,\n          scheme,\n          xcodeProject,\n          args,\n        );\n      }\n    } else if (args.device) {\n      let device = matchingDevice(devices, args.device);\n\n      if (!device) {\n        const deviceByUdid = devices.find((d) => d.udid === args.device);\n        if (!deviceByUdid) {\n          return logger.error(\n            `Could not find a physical device with name or unique device identifier: \"${chalk.bold(\n              args.device,\n            )}\". ${printFoundDevices(devices, 'device')}`,\n          );\n        }\n\n        device = deviceByUdid;\n\n        if (deviceByUdid.type === 'simulator') {\n          return logger.error(\n            `The device with udid: \"${chalk.bold(\n              args.device,\n            )}\" is a simulator. If you want to run on a simulator, use the \"--simulator\" flag instead.`,\n          );\n        }\n      }\n\n      if (device && device.type === 'simulator') {\n        return logger.error(\n          \"`--device` flag is intended for physical devices. If you're trying to run on a simulator, use `--simulator` instead.\",\n        );\n      }\n\n      if (device && device.type === 'device') {\n        return runOnDevice(\n          device,\n          platformName,\n          mode,\n          scheme,\n          xcodeProject,\n          args,\n        );\n      }\n    } else {\n      runOnSimulator(\n        xcodeProject,\n        platformName,\n        mode,\n        scheme,\n        args,\n        fallbackSimulator,\n      );\n    }\n  };\n\nexport default createRun;\n"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"names":["getPackageJson","root","require","path","join","CLIError","createRun","platformName","_","ctx","args","link","setPlatform","platformConfig","project","sdkNames","readableName","platformReadableName","getPlatformInfo","undefined","supportedPlatforms","packager","port","installedPods","automaticPodsInstallation","forcePods","onlyPods","isAppRunningNewArchitecture","sourceDir","getArchitecture","resolvePods","dependencies","reactNativePath","forceInstall","newArchEnabled","newPort","startPackager","findDevServerPort","startServerInNewWindow","terminal","reactNativeVersion","setVersion","xcodeProject","getXcodeProjectAndDir","process","chdir","binaryPath","isAbsolute","fs","existsSync","mode","scheme","getConfiguration","buildOutput","buildProject","openApp","target","devices","listDevices","length","logger","error","packageJson","preferredDevice","cacheManager","get","name","preferredDeviceIndex","findIndex","udid","device","splice","unshift","fallbackSimulator","getFallbackSimulator","interactive","warn","selectedDevice","promptForDeviceSelection","set","type","runOnSimulator","runOnDevice","simulator","bootedSimulators","filter","state","bootedDevices","booted","info","map","find","d","chalk","bold","matchingDevice","deviceByUdid","printFoundDevices"],"sources":["../../../src/commands/runCommand/createRun.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport path from 'path';\nimport fs from 'fs';\nimport chalk from 'chalk';\nimport {Config, IOSProjectConfig} from '@react-native-community/cli-types';\nimport {\n  logger,\n  CLIError,\n  link,\n  startServerInNewWindow,\n  findDevServerPort,\n  cacheManager,\n} from '@react-native-community/cli-tools';\nimport getArchitecture from '../../tools/getArchitecture';\nimport listDevices from '../../tools/listDevices';\nimport {promptForDeviceSelection} from '../../tools/prompts';\nimport {BuildFlags} from '../buildCommand/buildOptions';\nimport {buildProject} from '../buildCommand/buildProject';\nimport {getConfiguration} from '../buildCommand/getConfiguration';\nimport {getXcodeProjectAndDir} from '../buildCommand/getXcodeProjectAndDir';\nimport {getFallbackSimulator} from './getFallbackSimulator';\nimport {getPlatformInfo} from './getPlatformInfo';\nimport {printFoundDevices, matchingDevice} from './matchingDevice';\nimport {runOnDevice} from './runOnDevice';\nimport {runOnSimulator} from './runOnSimulator';\nimport {BuilderCommand} from '../../types';\nimport {\n  supportedPlatforms,\n  resolvePods,\n} from '@react-native-community/cli-config-apple';\nimport openApp from './openApp';\n\nexport interface FlagsT extends BuildFlags {\n  simulator?: string;\n  device?: string | true;\n  udid?: string;\n  binaryPath?: string;\n  listDevices?: boolean;\n  packager?: boolean;\n  port: number;\n  terminal?: string;\n}\n\nfunction getPackageJson(root: string) {\n  try {\n    return require(path.join(root, 'package.json'));\n  } catch {\n    throw new CLIError(\n      'No package.json found. Please make sure the file exists in the current folder.',\n    );\n  }\n}\n\nconst createRun =\n  ({platformName}: BuilderCommand) =>\n  async (_: Array<string>, ctx: Config, args: FlagsT) => {\n    // React Native docs assume platform is always ios/android\n    link.setPlatform('ios');\n    const platformConfig = ctx.project[platformName] as IOSProjectConfig;\n    const {sdkNames, readableName: platformReadableName} =\n      getPlatformInfo(platformName);\n\n    if (\n      platformConfig === undefined ||\n      supportedPlatforms[platformName] === undefined\n    ) {\n      throw new CLIError(\n        `Unable to find ${platformReadableName} platform config`,\n      );\n    }\n\n    let {packager, port} = args;\n    let installedPods = false;\n    // check if pods need to be installed\n    if (\n      platformConfig.automaticPodsInstallation ||\n      args.forcePods ||\n      args.onlyPods\n    ) {\n      const isAppRunningNewArchitecture = platformConfig.sourceDir\n        ? await getArchitecture(platformConfig.sourceDir)\n        : undefined;\n\n      await resolvePods(\n        ctx.root,\n        platformConfig.sourceDir,\n        ctx.dependencies,\n        platformName,\n        ctx.reactNativePath,\n        {\n          forceInstall: args.forcePods || args.onlyPods,\n          newArchEnabled: isAppRunningNewArchitecture,\n        },\n      );\n\n      installedPods = true;\n    }\n\n    if (args.onlyPods) {\n      return;\n    }\n\n    if (packager) {\n      const {port: newPort, startPackager} = await findDevServerPort(\n        port,\n        ctx.root,\n      );\n\n      if (startPackager) {\n        await startServerInNewWindow(\n          newPort,\n          ctx.root,\n          ctx.reactNativePath,\n          args.terminal,\n        );\n      }\n    }\n\n    if (ctx.reactNativeVersion !== 'unknown') {\n      link.setVersion(ctx.reactNativeVersion);\n    }\n\n    let {xcodeProject, sourceDir} = getXcodeProjectAndDir(\n      platformConfig,\n      platformName,\n      installedPods,\n    );\n\n    process.chdir(sourceDir);\n\n    if (args.binaryPath) {\n      args.binaryPath = path.isAbsolute(args.binaryPath)\n        ? args.binaryPath\n        : path.join(ctx.root, args.binaryPath);\n\n      if (!fs.existsSync(args.binaryPath)) {\n        throw new CLIError(\n          'binary-path was specified, but the file was not found.',\n        );\n      }\n    }\n\n    const {mode, scheme} = await getConfiguration(\n      xcodeProject,\n      sourceDir,\n      args,\n      platformName,\n    );\n\n    if (platformName === 'macos') {\n      const buildOutput = await buildProject(\n        xcodeProject,\n        platformName,\n        undefined,\n        mode,\n        scheme,\n        args,\n      );\n\n      openApp({\n        buildOutput,\n        xcodeProject,\n        mode,\n        scheme,\n        target: args.target,\n        binaryPath: args.binaryPath,\n      });\n\n      return;\n    }\n\n    let devices = await listDevices(sdkNames);\n\n    if (devices.length === 0) {\n      return logger.error(\n        `${platformReadableName} devices or simulators not detected. Install simulators via Xcode or connect a physical ${platformReadableName} device`,\n      );\n    }\n\n    const packageJson = getPackageJson(ctx.root);\n\n    const preferredDevice = cacheManager.get(\n      packageJson.name,\n      'lastUsedIOSDeviceId',\n    );\n\n    if (preferredDevice) {\n      const preferredDeviceIndex = devices.findIndex(\n        ({udid}) => udid === preferredDevice,\n      );\n\n      if (preferredDeviceIndex > -1) {\n        const [device] = devices.splice(preferredDeviceIndex, 1);\n        devices.unshift(device);\n      }\n    }\n\n    const fallbackSimulator =\n      platformName === 'ios' || platformName === 'tvos'\n        ? getFallbackSimulator(args)\n        : devices[0];\n\n    if (args.listDevices || args.interactive) {\n      if (args.device || args.udid) {\n        logger.warn(\n          `Both ${\n            args.device ? 'device' : 'udid'\n          } and \"list-devices\" parameters were passed to \"run\" command. We will list available devices and let you choose from one.`,\n        );\n      }\n\n      const selectedDevice = await promptForDeviceSelection(devices);\n\n      if (!selectedDevice) {\n        throw new CLIError(\n          `Failed to select device, please try to run app without ${\n            args.listDevices ? 'list-devices' : 'interactive'\n          } command.`,\n        );\n      } else {\n        if (selectedDevice.udid !== preferredDevice) {\n          cacheManager.set(\n            packageJson.name,\n            'lastUsedIOSDeviceId',\n            selectedDevice.udid,\n          );\n        }\n      }\n\n      if (selectedDevice.type === 'simulator') {\n        return runOnSimulator(\n          xcodeProject,\n          platformName,\n          mode,\n          scheme,\n          args,\n          selectedDevice,\n        );\n      } else {\n        return runOnDevice(\n          selectedDevice,\n          platformName,\n          mode,\n          scheme,\n          xcodeProject,\n          args,\n        );\n      }\n    }\n\n    if (!args.device && !args.udid && !args.simulator) {\n      const bootedSimulators = devices.filter(\n        ({state, type}) => state === 'Booted' && type === 'simulator',\n      );\n      const bootedDevices = devices.filter(({type}) => type === 'device'); // Physical devices here are always booted\n      const booted = [...bootedSimulators, ...bootedDevices];\n\n      if (booted.length === 0) {\n        logger.info(\n          'No booted devices or simulators found. Launching first available simulator...',\n        );\n        return runOnSimulator(\n          xcodeProject,\n          platformName,\n          mode,\n          scheme,\n          args,\n          fallbackSimulator,\n        );\n      }\n\n      logger.info(`Found booted ${booted.map(({name}) => name).join(', ')}`);\n\n      for (const simulator of bootedSimulators) {\n        await runOnSimulator(\n          xcodeProject,\n          platformName,\n          mode,\n          scheme,\n          args,\n          simulator || fallbackSimulator,\n        );\n      }\n\n      for (const device of bootedDevices) {\n        await runOnDevice(\n          device,\n          platformName,\n          mode,\n          scheme,\n          xcodeProject,\n          args,\n        );\n      }\n\n      return;\n    }\n\n    if (args.device && args.udid) {\n      return logger.error(\n        'The `device` and `udid` options are mutually exclusive.',\n      );\n    }\n\n    if (args.udid) {\n      let device = devices.find((d) => d.udid === args.udid);\n      if (device?.type === 'simulator') {\n        return runOnSimulator(\n          xcodeProject,\n          platformName,\n          mode,\n          scheme,\n          args,\n          fallbackSimulator,\n        );\n      } else {\n        if (!device) {\n          // On arm64 machines, the catalyst UDID returned by 'xcrun xctrace list devices' is not correct\n          // xcodebuild will return an error indicating the UDID is unknown and offering a different one\n          // you may obtain it by running xcodebuild with the UDID you think works then parse out the other one from the returned error:\n          // CATALYST_DESTINATION=$(xcodebuild -workspace ios/rnfbdemo.xcworkspace -configuration Debug -scheme rnfbdemo -destination id=7153382A-C92B-5798-BEA3-D82D195F25F8 2>&1|grep macOS|grep Catalyst|head -1 |cut -d':' -f5 |cut -d' ' -f1)\n          //\n          // How to handle the incorrect catalyst UDID?\n          // Assume if a UDID is specified, the user knows what they are doing.\n          // Use the given UDID and force the type, so \"catalyst\" will launch the app correctly\n          device = {name: 'unknown', udid: args.udid, type: 'catalyst'};\n          logger.warn(\n            `Could not find a device with udid: \"${chalk.bold(args.udid)}\".`,\n          );\n          logger.warn(\n            'Running with provided udid anyway, and type \"catalyst\". \\'xcodebuild\\' command may return error.',\n          );\n        }\n        return runOnDevice(\n          device,\n          platformName,\n          mode,\n          scheme,\n          xcodeProject,\n          args,\n        );\n      }\n    } else if (args.device) {\n      let device = matchingDevice(devices, args.device);\n\n      if (!device) {\n        const deviceByUdid = devices.find((d) => d.udid === args.device);\n        if (!deviceByUdid) {\n          return logger.error(\n            `Could not find a physical device with name or unique device identifier: \"${chalk.bold(\n              args.device,\n            )}\". ${printFoundDevices(devices, 'device')}`,\n          );\n        }\n\n        device = deviceByUdid;\n\n        if (deviceByUdid.type === 'simulator') {\n          return logger.error(\n            `The device with udid: \"${chalk.bold(\n              args.device,\n            )}\" is a simulator. If you want to run on a simulator, use the \"--simulator\" flag instead.`,\n          );\n        }\n      }\n\n      if (device && device.type === 'simulator') {\n        return logger.error(\n          \"`--device` flag is intended for physical devices. If you're trying to run on a simulator, use `--simulator` instead.\",\n        );\n      }\n\n      if (device && device.type === 'device') {\n        return runOnDevice(\n          device,\n          platformName,\n          mode,\n          scheme,\n          xcodeProject,\n          args,\n        );\n      }\n    } else {\n      runOnSimulator(\n        xcodeProject,\n        platformName,\n        mode,\n        scheme,\n        args,\n        fallbackSimulator,\n      );\n    }\n  };\n\nexport default createRun;\n"],"mappings":"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"}
\ No newline at end of file
