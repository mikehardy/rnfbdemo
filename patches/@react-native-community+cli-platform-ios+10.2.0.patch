diff --git a/node_modules/@react-native-community/cli-platform-ios/build/commands/runIOS/index.js b/node_modules/@react-native-community/cli-platform-ios/build/commands/runIOS/index.js
index a7296fb..51e598f 100644
--- a/node_modules/@react-native-community/cli-platform-ios/build/commands/runIOS/index.js
+++ b/node_modules/@react-native-community/cli-platform-ios/build/commands/runIOS/index.js
@@ -129,9 +129,18 @@ async function runIOS(_, ctx, args) {
     return _cliTools().logger.error('The `device` and `udid` options are mutually exclusive.');
   }
   if (args.udid) {
-    const device = devices.find(d => d.udid === args.udid);
+    let device = devices.find(d => d.udid === args.udid);
+    console.error("device is: " + JSON.stringify(device))
     if (!device) {
-      return _cliTools().logger.error(`Could not find a device with udid: "${_chalk().default.bold(args.udid)}". ${printFoundDevices(devices)}`);
+      // FIXME - on arm64 machines, the catalyst UDID returned by 'xcrun xctrace list devices' is not correct
+      //         xcodebuild will return an error indicating the UDID is unknown and offering a different one
+      //         you may obtain it by running xcodebuild with the UDID you think works then parse out the other one from the returned error:
+      // CATALYST_DESTINATION=$(xcodebuild -workspace ios/rnfbdemo.xcworkspace -configuration Debug -scheme rnfbdemo -destination id=7153382A-C92B-5798-BEA3-D82D195F25F8 2>&1|grep macOS|grep Catalyst|head -1 |cut -d':' -f5 |cut -d' ' -f1)
+      //
+      // How to handle this? offer a command line to force udid (and type, so "catalyst" will launch the app correctly) ?
+      device = { "name":"unknown","udid":args.udid,"type":"catalyst"};
+      _cliTools().logger.warn(`Could not find a device with udid: "${_chalk().default.bold(args.udid)}". ${printFoundDevices(devices)}`);
+      _cliTools().logger.warn(`Running with provided udid anyway, and type "catalyst". 'xcodebuild' command may return error.`);
     }
     if (device.type === 'simulator') {
       return runOnSimulator(xcodeProject, scheme, args);
